Class dc.irisrad.Wizard Extends %CSP.REST
{

ClassMethod Upload(pInput As %Library.AbstractStream, Output pOutput As %Stream.Object) As %Status
{
	Set status =  $$$OK

	//Checa os Parametros
	If ($$$ISERR(%request.Content)) {
		Set %response.Status = "400 Bad Request"
		Set %response.Context("Mensagem") = "Falta os parametros"
		Return $$$NO
	}
	//Recupera JSON Enviado pelo cliente
	Set dados = {}.%FromJSON(%request.Content)
	//Converte JSON envido para objeto JSON
	//Set tSC = ##class(%ZEN.Auxiliary.jsonProvider).%ParseJSON(dados, "%ZEN.proxyObject", .objJSON)
	//Valida converção
	if $$$ISERR(tSC) {
		Set %response.Status = "500 Internal Server Error"
		Set %response.Context("Mensagem") = "Retorno ao gerar objeto JSON"
		Return $$$NO
	}
	
	set ^zHGD("separator") = objJSON.separator
	set ^zHGD("className") = objJSON.className
	set ^zHGD("cubeCreate") = objJSON.cubeCreate
	set ^zHGD("cubeName") = objJSON.cubeName
	set ^zHGD("sampleDashboard") = objJSON.sampleDashboard

	Set listRetorno = {}
	Set listRetorno.status 		= status
	Set listRetorno.mensagem	= mensagem
	Write listRetorno.%ToJSON()
	;
	Return $$$OK
}

/// Modify Persistent class generated by CSVGen to include support to RESTForms
/// ex: do ##class(dc.irisrad.Wizard).AddRESTFormsSupport("User.CountriesByPopulation")
ClassMethod AddRESTFormsSupport(pClassName As %String) As %Status
{
    set sc=$$$OK
    
	set oClass = ##class(%Dictionary.ClassDefinition).%OpenId(pClassName)
	
	if $SYSTEM.Status.IsError(oClass)  {
		do $system.Status.DecomposeStatus(%objlasterror,.Err)
		quit Err(Err)
	}
	
	set originalSuper = oClass.Super
	if ($find(originalSuper,"Form.Adaptor") = 0) {
		set oClass.Super = originalSuper_",Form.Adaptor"
	}

	// opening of the parent class 
	if $IsObject(oClass) {
		set nameList = $listbuild("DISPLAYPROPERTY","FORMNAME","OBJPERMISSIONS")
		&SQL(SELECT Name INTO :tDisplayName FROM %Dictionary.PropertyDefinition WHERE parent = :pClassName AND SequenceNumber = 1)
		set valueList = $listbuild(tDisplayName,pClassName,"CRUD")

		// creating the new parameter
		for i = 1:1:$listlength(nameList) {
			if '(##class(%Dictionary.ParameterDefinition).IDKEYExists(pClassName, $listget(nameList,i))) {
				set param=##class(%Dictionary.ParameterDefinition).%New()
				set param.Name=$listget(nameList,i)
				set param.Default=$listget(valueList,i)
				// adding the parameter to the parent class
				do oClass.Parameters.Insert(param)
				do oClass.%Save()
			}
		}
		
	}

	// get list of properties and add parameters to RESTForms
	set count = oClass.Properties.Count()
	for i = 1:1:count {
		set oProperty = ##class(%Dictionary.PropertyDefinition).%OpenId(pClassName_"||"_oClass.Properties.GetAt(i).Name)
		do oProperty.Parameters.SetAt(oProperty.Name,"DISPLAYNAME")
		do oProperty.Parameters.SetAt("INOUT","%JSONINCLUDE")
		do oProperty.Parameters.SetAt("ID","%JSONREFERENCE")
		do oProperty.%Save()
	}
	do oClass.%Save()
	set sc = ##class(Form.Property).compileClass(pClassName)

    quit sc
}

}
